AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a VPC which have 4 of private subnet in 2 AZ in ap-northeast-2 region

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Configurations
        Parameters:
          - OperatingSystem
          - InstanceType

      - Label:
          default: Availability Zone Configuration
        Parameters:
          - AvailabilityZones1
          - AvailabilityZones2
      - Label:
          default: Network Configuration
        Parameters:
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - PrivateSubnet4CIDR
          - LogsRetentionInDays
      - Label:
          default: KB Project environment
        Parameters:
          - ProjectName
          - Stage
          - CodeName

    ParameterLabels:
      AvailabilityZones1:
        default: Availability Zones (1)
      AvailabilityZones2:
        default: Availability Zones (2)
      PublicSubnet1CIDR:
        default: Public Subnet 1 CIDR in Availability Zones (1)
      PublicSubnet2CIDR:
        default: Public Subnet 2 CIDR in Availability Zones (2)
      PrivateSubnet3CIDR:
        default: Private Subnet 3 CIDR in Availability Zones (1)
      PrivateSubnet4CIDR:
        default: Private Subnet 4 CIDR in Availability Zones (2)
      PrivateSubnet1CIDR:
        default: Private Subnet 1 CIDR in Availability Zones (1)
      PrivateSubnet2CIDR:
        default: Private Subnet 2 CIDR in Availability Zones (2)
      PrivateSubnet3CIDR:
        default: Private Subnet 3 CIDR in Availability Zones (1)
      PrivateSubnet4CIDR:
        default: Private Subnet 4 CIDR in Availability Zones (2)
      VPCCIDR:
        default: VPC CIDR
      LogsRetentionInDays:
        default: Flow Logs Retention In Days

Mappings:
  AWSInstanceType2Arch:
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64

Parameters:
  ProjectName:
    Description: Specifiy the name of project that is applied this resource
    Type: String
    Default: 'pcm'
  Stage:
    Description: Step of project name
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'stg'
      - 'qa'
      - 'prd'
  CodeName:
    Description: Code name of work
    Type: String
    Default: 'pao'
    AllowedValues:
      - 'pao'
      - 'pai'
      - 'pea'
  AvailabilityZones1:
    Description: 'List of Availability Zones to use for the subnets in the VPC.'
    Type: String
    Default: 'a'
    AllowedValues:
      - 'a'
      - 'c'
  AvailabilityZones2:
    Description: 'List of Availability Zones to use for the subnets in the VPC.'
    Type: String
    Default: 'c'
    AllowedValues:
      - 'a'
      - 'c'
  PublicSubnet1CIDR:
    Default: 10.0.1.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String
  
  PublicSubnet2CIDR:
    Default: 10.0.2.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.3.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Description: CIDR block for private subnet 1A located in Availability Zones (1)
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.4.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Description: CIDR block for private subnet 1B located in Availability Zones (2)
    Type: String

  PrivateSubnet3CIDR:
    Default: 10.0.5.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Description: CIDR block for private subnet 2A located in Availability Zones (1)
    Type: String

  PrivateSubnet4CIDR:
    Default: 10.0.6.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Description: CIDR block for private subnet 2B located in Availability Zones (2)
    Type: String

  VPCCIDR:
    Default: 10.0.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Description: CIDR block for the VPC
    Type: String

  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m1.small
    AllowedValues:
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  OperatingSystem:
    Description: Code name of work
    Type: String
    Default: 'RedHat Linux'
    AllowedValues:
      - 'RedHat Linux'
      - 'Windows2010'
      - 'Amazon Linux'
      - 'Ubuntu'

Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    DeletionPolicy: Retain
    Properties:
      DomainName: !Join ['', [!Ref 'AWS::Region',.compute.internal]]
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub dhcp-${ProjectName}-${Stage}-${CodeName}
  
  #
  # VPC Configurations
  #
  VPC:
    Type: AWS::EC2::VPC
    DeletionPolicy: Retain
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      Tags:
        - Key: Name
          Value: !Sub vpc-${ProjectName}-${Stage}-${CodeName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub igw-${ProjectName}-${Stage}-${CodeName}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  # Public Subnet Configurations
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet1CIDR'
      AvailabilityZone: !Sub
        - ap-northeast-2${AZ}
        - { AZ : !Ref 'AvailabilityZones1' }
      Tags:
        - Key: Name
          Value: !Sub 
            - sn-${ProjectName}-${Stage}-${CodeName}-pub-${AZs}
            - { AZs : !Ref 'AvailabilityZones1' }
        - Key: Network
          Value: Public

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet2CIDR'
      AvailabilityZone: !Sub
        - ap-northeast-2${AZ}
        - { AZ : !Ref 'AvailabilityZones2' }
      Tags:
        - Key: Name
          Value: !Sub 
            - sn-${ProjectName}-${Stage}-${CodeName}-pub-${AZs}
            - { AZs : !Ref 'AvailabilityZones2' }
        - Key: Network
          Value: Public

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub rt-${ProjectName}-${Stage}-${CodeName}-pub
        - Key: Network
          Value: Public

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicSubnetRouteTable' 


  #
  # Private Subnet Configurations
  #

  PrivateSubnet1:
    DependsOn: VPC    
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet1CIDR'
      AvailabilityZone: !Sub
        - ap-northeast-2${AZ}
        - { AZ : !Ref 'AvailabilityZones1' }
      Tags:
        - Key: Name
          Value: !Sub 
            - sn-${ProjectName}-${Stage}-${CodeName}-pub-${AZs}
            - { AZs : !Ref 'AvailabilityZones1' }
        - Key: Network
          Value: Private

  PrivateSubnet2:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet2CIDR'
      AvailabilityZone: !Sub
        - ap-northeast-2${AZ}
        - { AZ : !Ref 'AvailabilityZones2' }
      Tags:
        - Key: Name
          Value: !Sub 
            - sn-${ProjectName}-${Stage}-${CodeName}-pub-${AZs}
            - { AZs : !Ref 'AvailabilityZones2' }
        - Key: Network
          Value: Private

  PrivateSubnet3:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet3CIDR'
      AvailabilityZone: !Sub
        - ap-northeast-2${AZ}
        - { AZ : !Ref 'AvailabilityZones1' }
      Tags:
        - Key: Name
          Value: !Sub 
            - sn-${ProjectName}-${Stage}-${CodeName}-pub-${AZs}
            - { AZs : !Ref 'AvailabilityZones1' }
        - Key: Network
          Value: Private

  PrivateSubnet4:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet4CIDR'
      AvailabilityZone: !Sub
        - ap-northeast-2${AZ}
        - { AZ : !Ref 'AvailabilityZones2' }
      Tags:
        - Key: Name
          Value: !Sub 
            - sn-${ProjectName}-${Stage}-${CodeName}-pub-${AZs}
            - { AZs : !Ref 'AvailabilityZones2' }
        - Key: Network
          Value: Private

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub rt-${ProjectName}-${Stage}-${CodeName}-pri
        - Key: Network
          Value: Public
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      RouteTableId: !Ref 'PrivateSubnetRouteTable' 

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      RouteTableId: !Ref 'PrivateSubnetRouteTable' 

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet3'
      RouteTableId: !Ref 'PrivateSubnetRouteTable' 

  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet4'
      RouteTableId: !Ref 'PrivateSubnetRouteTable' 

  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  VPCFlowLogsRole:
    DeletionPolicy: Retain
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Allow Resource * for CloudWatch Logs API since the resources are customer defined."

    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: '*'
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    DeletionPolicy: Retain
    Properties:
        DeliverLogsPermissionArn: !GetAtt 'VPCFlowLogsRole.Arn'
        LogGroupName: !Ref 'VPCFlowLogsLogGroup'
        ResourceId: !Ref 'VPC'
        ResourceType: VPC
        TrafficType: ALL

  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Handler: index.handler
      Code:
        ZipFile: |
          /**
          * A sample Lambda function that looks up the latest AMI ID for a given region and architecture.
          **/

          // Map instance architectures to an AMI name pattern
          var archToAMINamePattern = {
              "PV64": "amzn-ami-pv*x86_64-ebs",
              "HVM64": "amzn-ami-hvm*x86_64-gp2",
              "HVMG2": "amzn-ami-graphics-hvm*x86_64-ebs*"
          };
          var aws = require("aws-sdk");
          
          exports.handler = function(event, context) {
          
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              
              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                  sendResponse(event, context, "SUCCESS");
                  return;
              }
          
              var responseStatus = "FAILED";
              var responseData = {};
          
              var ec2 = new aws.EC2({region: event.ResourceProperties.Region});
              var describeImagesParams = {
                  Filters: [{ Name: "name", Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}],
                  Owners: [event.ResourceProperties.Architecture == "HVMG2" ? "679593333241" : "amazon"]
              };
          
              // Get AMI IDs with the specified name pattern and owner
              ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {
                  if (err) {
                      responseData = {Error: "DescribeImages call failed"};
                      console.log(responseData.Error + ":\n", err);
                  }
                  else {
                      var images = describeImagesResult.Images;
                      // Sort images by name in decscending order. The names contain the AMI version, formatted as YYYY.MM.Ver.
                      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });
                      for (var j = 0; j < images.length; j++) {
                          if (isBeta(images[j].Name)) continue;
                          responseStatus = "SUCCESS";
                          responseData["Id"] = images[j].ImageId;
                          break;
                      }
                  }
                  sendResponse(event, context, responseStatus, responseData);
              });
          };

          // Check if the image is a beta or rc image. The Lambda function won't return any of those images.
          function isBeta(imageName) {
              return imageName.toLowerCase().indexOf("beta") > -1 || imageName.toLowerCase().indexOf(".rc") > -1;
          }


          // Send response to the pre-signed S3 URL 
          function sendResponse(event, context, responseStatus, responseData) {
          
              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData
              });
          
              console.log("RESPONSE BODY:\n", responseBody);
          
              var https = require("https");
              var url = require("url");
          
              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };
          
              console.log("SENDING RESPONSE...\n");
          
              var request = https.request(options, function(response) {
                  console.log("STATUS: " + response.statusCode);
                  console.log("HEADERS: " + JSON.stringify(response.headers));
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });
          
              request.on("error", function(error) {
                  console.log("sendResponse Error:" + error);
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });
            
              // write data to request body
              request.write(responseBody);
              request.end();
          }
      Description: Invoke a function during stack creation.
      Timeout: '30'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeImages'
                Resource: '*'

  AMIInfo:
    Type: 'Custom::AMIInfo'
    Properties:
      ServiceToken: !GetAtt 
        - AMIInfoFunction
        - Arn
      Region: !Ref 'AWS::Region'
      Architecture: !FindInMap 
        - AWSInstanceType2Arch
        - !Ref InstanceType
        - Arch
  
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn : 
      - AMIInfo
      - AMIInfoFunction
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !GetAtt 
        - AMIInfo
        - Id
      SecurityGroups: [!Ref 'InstanceSecurityGroup']

Outputs:
  PublicSubnet1CIDR:
    Description: Private subnet 1 CIDR in Availability Zone 1
    Value: !Ref 'PublicSubnet1CIDR'
  PublicSubnet1ID:
    Description: Private subnet 1 ID in Availability Zone 1
    Value: !Ref 'PublicSubnet1'
  PublicSubnet2CIDR:
    Description: Private subnet 2 CIDR in Availability Zone 2
    Value: !Ref 'PublicSubnet2CIDR'
  PublicSubnet2ID:
    Description: Private subnet 2 ID in Availability Zone 2
    Value: !Ref 'PublicSubnet2'
  PrivateSubnet1CIDR:
    Description: Private subnet 3 CIDR in Availability Zone 1
    Value: !Ref 'PrivateSubnet3CIDR'
  PrivateSubnet1ID:
    Description: Private subnet 3 ID in Availability Zone 1
    Value: !Ref 'PrivateSubnet3'
  PrivateSubnet2CIDR:
    Description: Private subnet 4 CIDR in Availability Zone 2
    Value: !Ref 'PrivateSubnet2CIDR'
  PrivateSubnet2ID:
    Description: Private subnet 4 ID in Availability Zone 2
    Value: !Ref 'PrivateSubnet2'
  PrivateSubnet3CIDR:
    Description: Private subnet 4 CIDR in Availability Zone 2
    Value: !Ref 'PrivateSubnet3CIDR'
  PrivateSubnet3ID:
    Description: Private subnet 4 ID in Availability Zone 2
    Value: !Ref 'PrivateSubnet3'
  PrivateSubnet4CIDR:
    Description: Private subnet 4 CIDR in Availability Zone 2
    Value: !Ref 'PrivateSubnet3CIDR'
  PrivateSubnet4ID:
    Description: Private subnet 4 ID in Availability Zone 2
    Value: !Ref 'PrivateSubnet3'
  VPCCIDR:
    Value: !Ref 'VPCCIDR'
    Description: VPC CIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCCIDR'
  VPCID:
    Value: !Ref 'VPC'
    Description: VPC ID
    Export:
      Name: DefaultVPCId
  VPCRegion:
    Value: !Ref AWS::Region
    Description: VPC Region
